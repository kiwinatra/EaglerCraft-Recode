import Foundation;final class SA{private var s=[String:ST]();func c(_ n:A)throws{switch n{case let f as FD:try v(f);try f.b.forEach{c($0)}case let v as VD:try g(v.n,v.t);s[v.n]=ST(t:v.t,k:v.k);if let e=v.i{try c(e)}case let b as BE:try c(b.l);try c(b.r);try t(b.l,b.r,b.o)default:break}}private func v(_ f:FD)throws{var ns=s;try f.p.forEach{ns[$0.n]=ST(t:$0.t,k:"param")};s=ns;try f.b.forEach{c($0)};s=ns}private func g(_ n:String,_ t:String?)throws{if s[n] != nil{throw CE.u(n)}}private func t(_ l:E,_ r:E,_ o:String)throws{guard let lt=s.t(l),let rt=s.t(r)else{throw CE.t(o)};if lt != rt{throw CE.m(lt,rt,o)}}}