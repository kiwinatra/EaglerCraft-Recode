// log.js - –ö—Ä–∞—Å–∏–≤—ã–π –ª–æ–≥–≥–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
    reset: '\x1b[0m',
    bright: '\x1b[1m',
    dim: '\x1b[2m',
    underscore: '\x1b[4m',
    blink: '\x1b[5m',
    reverse: '\x1b[7m',
    hidden: '\x1b[8m',
    
    // –¶–≤–µ—Ç–∞ —Ç–µ–∫—Å—Ç–∞
    black: '\x1b[30m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    magenta: '\x1b[35m',
    cyan: '\x1b[36m',
    white: '\x1b[37m',
    
    // –¶–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
    bgBlack: '\x1b[40m',
    bgRed: '\x1b[41m',
    bgGreen: '\x1b[42m',
    bgYellow: '\x1b[43m',
    bgBlue: '\x1b[44m',
    bgMagenta: '\x1b[45m',
    bgCyan: '\x1b[46m',
    bgWhite: '\x1b[47m'
  };
  
  const log = {
    info: (...args) => console.log(`${colors.cyan}‚Ñπ INFO:${colors.reset}`, ...args),
    success: (...args) => console.log(`${colors.green}‚úì SUCCESS:${colors.reset}`, ...args),
    warn: (...args) => console.log(`${colors.yellow}‚ö† WARNING:${colors.reset}`, ...args),
    error: (...args) => console.log(`${colors.red}‚úó ERROR:${colors.reset}`, ...args),
    debug: (...args) => console.log(`${colors.magenta}üêõ DEBUG:${colors.reset}`, ...args),
    event: (...args) => console.log(`${colors.blue}üéØ EVENT:${colors.reset}`, ...args),
    
    // –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥ –¥–ª—è –≤–∞—à–µ–≥–æ –∫—É—Ä—Å–æ—Ä–∞
    cursor: (x, y) => console.log(
      `${colors.bgBlue}${colors.white} CURSOR ${colors.reset}`,
      `X: ${colors.bright}${x}px${colors.reset}`,
      `Y: ${colors.bright}${y}px${colors.reset}`
    ),
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–π
    animation: (name) => console.log(
      `${colors.bgMagenta}${colors.white} ANIMATION ${colors.reset}`,
      `${colors.underscore}${name}${colors.reset} triggered`
    ),
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫—Ä–æ–ª–ª–∞
    scroll: (direction) => console.log(
      `${colors.bgYellow}${colors.black} SCROLL ${colors.reset}`,
      `Direction: ${colors.bright}${direction}${colors.reset}`
    )
  };
  
  // –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö
  if (typeof module !== 'undefined' && module.exports) {
    module.exports = log;
  } else {
    window.log = log;
  }
  
  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –≤–∞—à–µ–≥–æ –∫–æ–¥–∞
  document.addEventListener('DOMContentLoaded', () => {
    log.success('DOM fully loaded and parsed');
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–æ–±—ã—Ç–∏–π –∫—É—Ä—Å–æ—Ä–∞
    const originalCursorMove = document.addEventListener('mousemove', (e) => {
      log.cursor(e.clientX, e.clientY);
    }, { once: true });
    
    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ IntersectionObserver
    const originalObserver = IntersectionObserver.prototype.observe;
    IntersectionObserver.prototype.observe = function(target) {
      log.event('Element observed', target);
      originalObserver.call(this, target);
    };
  });
  
  // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  // log.info('This is an info message');
  // log.success('Operation completed!');
  // log.warning('This is a warning');
  // log.error('Something went wrong!');
  // log.debug('Debugging information');